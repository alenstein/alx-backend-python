pipeline {
    agent any

    // The 'tools' block has been removed as the base Jenkins image includes Python 3.

    parameters {
        string(name: 'GITH_CREDENTIALS_ID', description: 'The ID of the credentials stored in Jenkins for GitHub access.')
        string(name: 'DOCKERHUB_CREDENTIALS_ID', description: 'The ID of the credentials stored in Jenkins for Docker Hub access.')
        string(name: 'DOCKERHUB_USERNAME', description: 'Your Docker Hub username.')
    }

    environment {
        IMAGE_NAME = "${params.DOCKERHUB_USERNAME}/messaging-app"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                echo 'Checking out the code from GitHub...'
                git branch: 'main',
                    credentialsId: params.GITH_CREDENTIALS_ID,
                    url: 'https://github.com/your-username/alx-backend-python.git' // Replace with your repo URL
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                // We can call pip3 directly because it is in the container's PATH.
                sh 'pip3 install -r messaging_app/requirements.txt'
            }
        }

        stage('Run Tests with Pytest') {
            steps {
                echo 'Running tests and generating a report...'
                sh '''
                    mkdir -p test-reports
                    pytest messaging_app/ --junitxml=test-reports/report.xml
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ./messaging_app"
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            echo 'Archiving test reports...'
            junit 'test-reports/report.xml'
        }
    }
}
